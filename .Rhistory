method = "repeatedcv", ## Repeated CV
repeats = 2,
number = 3, ## Number of folds
verbose = FALSE
)
result_rfe1 <- rfe(x = x_train,
y = y_train,
sizes = c(1:8), # sizes = c(1:ncol(x_train)),
rfeControl = control)
result_rfe1
summary(result_rfe1)
# END:   Model Creation
#===============================================================================
# BEGIN: Plot Predictor Strength
library(ggplot2)
# Create Substring for Model Data
subtitle_string <- paste(
"Method", control$method,
"with", control$repeats,"Repeat(s)",
"using", control$number, "Fold(s)"
, sep = " "
)
# Extract variable importance from result_rfe1
var_importance <- varImp(result_rfe1)
# Create a data frame with variable names and importance scores
var_df <- data.frame(variable = row.names(var_importance),
importance = var_importance$Overall)
# Convert the variable column to a factor with ordered levels in reverse order
var_df$variable <- factor(var_df$variable, levels = rev(var_df$variable))
# Sort the data frame by importance scores in descending order
var_df <- var_df[order(var_df$importance, decreasing = TRUE),]
# Create a bar plot of variable importance in descending order
ggplot(var_df, aes(x = variable, y = importance)) +
geom_bar(stat = "identity", color="black", fill = "forestgreen") +
labs(title = "Variable Importance Plot",
subtitle = subtitle_string,
xlab("Predictor"), ylab("Importance Score")) +
xlab("Predictor") + ylab("Importance Score") +
coord_flip() +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1))
# Citation Script
# read in the text file
library_list <- readLines("R libraries.txt")
# loop through each library and print the citation
for (library_name in library_list) {
citation(library_name)
}
# Citation Script
# read in the text file
library_list <- readLines("R libraries.txt")
# loop through each library and print the citation, with error handling
for (library_name in library_list) {
if (require(library_name, character.only = TRUE, quietly = TRUE)) {
citation(library_name)
} else {
message(paste(library_name, "is not an R library"))
}
}
citation(library_name)
# Citation Script
# read in the text file
library_list <- readLines("R libraries.txt")
# loop through each library and print the citation, with error handling
for (library_name in library_list) {
if (require(library_name, character.only = TRUE, quietly = TRUE)) {
print(citation(library_name))
} else {
message(paste(library_name, "is not an R library"))
}
}
# Citation Script
# read in the text file
library_list <- readLines("R libraries.txt")
# Citation Script
# read in the text file
library_list <- readLines("R libraries.txt")
# initialize empty vector for citations
proper.cite <- c()
# loop through each library and add the citation to proper.cite, with error handling
for (library_name in library_list) {
if (require(library_name, character.only = TRUE, quietly = TRUE)) {
proper.cite <- c(proper.cite, capture.output(citation(library_name)))
} else {
message(paste(library_name, "is not an R library"))
}
}
proper.cite
cat(proper.cite)
proper.cite <- paste(proper.cite, collapse = "\n")
cat(proper.cite)
proper.cite
cat(proper.cite)
text <- cat(proper.cite)
text
# output proper.cite to a text file
writeLines(cat(proper.cite), "citations.txt")
# output proper.cite to a text file
writeLines(proper.cite, "citations.txt")
library_list <- readLines("R libraries.txt")
# initialize empty vectors for citations
proper.cite_title <- c()
proper.cite_bibtex <- c()
# loop through each library and add the citation to proper.cite, with error handling
for (library_name in library_list) {
if (require(library_name, character.only = TRUE, quietly = TRUE)) {
citation_output <- capture.output(citation(library_name))
proper.cite_title <- c(proper.cite_title, citation_output[1])
proper.cite_bibtex <- c(proper.cite_bibtex, paste(citation_output[-1], collapse = "\n"))
} else {
message(paste(library_name, "is not an R library"))
}
}
# output proper.cite_title and proper.cite_bibtex to a text file
writeLines(proper.cite_title, "citations_title.txt")
writeLines(proper.cite_bibtex, "citations_bibtex.txt")
proper.cite_title
proper.cite_bibtex
citation_output
proper.cite
proper.cite <- paste(proper.cite, collapse = "\n")
library_list <- readLines("R libraries.txt")
# initialize empty vector for citations
proper.cite <- c()
# loop through each library and add the citation to proper.cite, with error handling
for (library_name in library_list) {
if (require(library_name, character.only = TRUE, quietly = TRUE)) {
proper.cite <- c(proper.cite, capture.output(citation(library_name)))
} else {
message(paste(library_name, "is not an R library"))
}
}
proper.cite <- paste(proper.cite, collapse = "\n")
cat(proper.cite)
proper.cite
cat(proper.cite)
proper.cite
proper.cite[1]
proper.cite[2]
length(proper.cite)
# Citation Script
# read in the text file
library_list <- readLines("R libraries.txt")
# initialize empty vector for citations
proper.cite <- c()
# loop through each library and add the citation to proper.cite, with error handling
for (library_name in library_list) {
if (require(library_name, character.only = TRUE, quietly = TRUE)) {
proper.cite <- c(proper.cite, capture.output(citation(library_name)))
} else {
message(paste(library_name, "is not an R library"))
}
}
proper.cite <- paste(proper.cite, collapse = "\n")
cat(proper.cite)
proper.cite
# Citation Script
# read in the text file
library_list <- readLines("R libraries.txt")
# initialize empty vector for citations
proper.cite <- c()
# loop through each library and add the citation to proper.cite, with error handling
for (library_name in library_list) {
if (require(library_name, character.only = TRUE, quietly = TRUE)) {
proper.cite <- c(proper.cite, capture.output(citation(library_name)))
} else {
message(paste(library_name, "is not an R library"))
}
}
proper.cite <- paste(proper.cite, collapse = "\n")
cat(proper.cite)
cat(proper.cite)
cat(proper.cite)
cat(proper.cite)
# output proper.cite to a text file
writeLines(proper.cite, "citations.txt")
citation("tidyverse")
citation("tidyverse", bibtext=FALSE)
# Citation Script
# read in the text file
library_list <- readLines("R libraries.txt")
# initialize empty vector for citations
proper.cite <- c()
# loop through each library and add the citation to proper.cite, with error handling
for (library_name in library_list) {
if (require(library_name, character.only = TRUE, quietly = TRUE)) {
proper.cite <- c(proper.cite, capture.output(citation(library_name)$textVersion))
} else {
message(paste(library_name, "is not an R library"))
}
}
proper.cite <- paste(proper.cite, collapse = "\n")
cat(proper.cite)
# output proper.cite to a text file
writeLines(proper.cite, "citations.txt")
# Citation Script
# read in the text file
library_list <- readLines("R libraries.txt")
# initialize empty vector for citations
proper.cite <- c()
# loop through each library and add the citation to proper.cite, with error handling
for (library_name in library_list) {
if (require(library_name, character.only = TRUE, quietly = TRUE)) {
proper.cite <- c(proper.cite, capture.output(citation(library_name)))
} else {
message(paste(library_name, "is not an R library"))
}
}
proper.cite <- paste(proper.cite, collapse = "\n")
cat(proper.cite)
# output proper.cite to a text file
writeLines(proper.cite, "citations.txt")
citation(library_name)$textVersion
citation("library_name"ggplot2"")$textVersion
citation("library_name"ggplot2)$textVersion
citation(ggplot2")$textVersion
a
if (require(library_name, character.only = TRUE, quietly = TRUE)) {
proper.cite <- c(proper.cite, capture.output(citation(library_name)$textVersion))
} else {
message(paste(library_name, "is not an R library"))
}
citation("ggplot2")$textVersion
# Citation Script
# read in the text file
library_list <- readLines("R libraries.txt")
# initialize empty vector for citations
proper.cite <- c()
# loop through each library and add the citation to proper.cite, with error handling
for (library_name in library_list) {
if (require(library_name, character.only = TRUE, quietly = TRUE)) {
proper.cite <- c(proper.cite, capture.output(citation(library_name)$textVersion))
} else {
message(paste(library_name, "is not an R library"))
}
}
proper.cite <- paste(proper.cite, collapse = "\n")
cat(proper.cite)
# output proper.cite to a text file
writeLines(proper.cite, "citations.txt")
# Citation Script
# read in the text file
library_list <- readLines("R libraries.txt")
# initialize empty vector for citations
proper.cite <- c()
# loop through each library and add the citation to proper.cite, with error handling
for (library_name in library_list) {
if (require(library_name, character.only = TRUE, quietly = TRUE)) {
proper.cite <- c(proper.cite, capture.output(citation(library_name)))
} else {
message(paste(library_name, "is not an R library"))
}
}
proper.cite <- paste(proper.cite, collapse = "\n")
cat(proper.cite)
# output proper.cite to a text file
writeLines(proper.cite, "citations.txt")
# Extract text citation for e1071 package
text_citation <- grep("(To cite package ‘*’ in publications use:)(.*)", "\\2", proper.cite, perl=TRUE)
text_citation
# Extract BibTeX citation for e1071 package
bibtex_citation_e1071 <- sub(".*(\\@Manual\\{[\\s\\S]*\\})", "\\1", string, perl=TRUE)
bibtex_citation_e1071
# Extract BibTeX citation for e1071 package
bibtex_citation_e1071 <- sub(".*(\\@Manual\\{[\\s\\S]*\\})", "\\1", proper.cite, perl=TRUE)
bibtex_citation_e1071
cat(bibtex_citation_e1071)
# output proper.cite to a text file
writeLines(proper.cite, "citations.txt")
string <- sub("LaTeX users", "LaTeX users:", proper.cite)
string
cat(string)
string <- sub("LaTeX users", "LaTeX users:", proper.cite)
cat(string)
string <- sub("LaTeX users is", "LaTeX users is:", proper.cite)
cat(string)
string <- sub("A BibTeX entry for LaTeX users is",
"A BibTeX entry for LaTeX users is:", proper.cite)
cat(string)
proper.cite
string <- sub("A BibTeX entry for LaTeX users is",
"A BibTeX entry for LaTeX users is:", cat(proper.cite))
string <- sub("A BibTeX entry for LaTeX users is",
"A BibTeX entry for LaTeX users is:", cat(proper.cite))
cat(string)
string <- sub("A BibTeX entry for LaTeX users is",
"A BibTeX entry for LaTeX users is:", proper.cite)
cat(string)
sub("A BibTeX entry for LaTeX users is",
"A BibTeX entry for LaTeX users is:", proper.cite)
sub("A BibTeX entry for LaTeX users is",
"A BibTeX entry for LaTeX users is:", proper.cite)
# Remove lines ending with a colon
my_string <- gsub("(^.*:$)", "", string, perl = TRUE)
my_string
# Print the modified string
cat(my_string)
my_string
my_string
# Remove lines ending with a colon
my_string <- gsub("(^.*:$)", "", string, perl = TRUE)
# Print the modified string
cat(my_string)
my_string
writeLines(my_string, "citations.txt")
# Read the contents of the file into a character vector
my_file <- "citations.txt"
my_lines <- readLines(my_file)
# Select only the lines that do not end with a colon
my_lines_no_colon <- my_lines[!grepl(":$", my_lines)]
# Write the modified character vector back to the file
writeLines(my_lines_no_colon, my_file)
my_lines_no_colon <- my_lines[!grepl(".@", my_lines)]
# Write the modified character vector back to the file
writeLines(my_lines_no_colon, my_file)
# Citation Script
# read in the text file
library_list <- readLines("R libraries.txt")
# initialize empty vector for citations
proper.cite <- c()
# loop through each library and add the citation to proper.cite, with error handling
for (library_name in library_list) {
if (require(library_name, character.only = TRUE, quietly = TRUE)) {
proper.cite <- c(proper.cite, capture.output(citation(library_name)))
} else {
message(paste(library_name, "is not an R library"))
}
}
proper.cite <- paste(proper.cite, collapse = "\n")
cat(proper.cite)
writeLines(proper.cite, "citations.txt")
# Read the contents of the file into a character vector
my_file <- "citations.txt"
my_lines <- readLines(my_file)
# Select only the lines that do not end with a colon
my_lines_no_colon <- my_lines[!grepl(":$", my_lines)]
my_lines_no_colon <- my_lines_no_colon[!grepl(".@", my_lines)]
# Write the modified character vector back to the file
writeLines(my_lines_no_colon, my_file)
# Citation Script
# read in the text file
library_list <- readLines("R libraries.txt")
# initialize empty vector for citations
proper.cite <- c()
# loop through each library and add the citation to proper.cite, with error handling
for (library_name in library_list) {
if (require(library_name, character.only = TRUE, quietly = TRUE)) {
proper.cite <- c(proper.cite, capture.output(citation(library_name)))
} else {
message(paste(library_name, "is not an R library"))
}
}
proper.cite <- paste(proper.cite, collapse = "\n")
cat(proper.cite)
writeLines(proper.cite, "citations.txt")
# Read the contents of the file into a character vector
my_file <- "citations.txt"
my_lines <- readLines(my_file)
# Select only the lines that do not end with a colon
my_lines_no_colon <- my_lines[!grepl(":$", my_lines)]
my_lines_no_colon <- my_lines_no_colon[!grepl(".@", my_lines)]
my_lines_no_colon <- my_lines_no_colon[my_lines_no_colon != "A BibTeX entry for LaTeX users is"]
# Write the modified character vector back to the file
writeLines(my_lines_no_colon, my_file)
# Citation Script
# read in the text file
library_list <- readLines("R libraries.txt")
# initialize empty vector for citations
proper.cite <- c()
# loop through each library and add the citation to proper.cite, with error handling
for (library_name in library_list) {
if (require(library_name, character.only = TRUE, quietly = TRUE)) {
proper.cite <- c(proper.cite, capture.output(citation(library_name)))
} else {
message(paste(library_name, "is not an R library"))
}
}
proper.cite <- paste(proper.cite, collapse = "\n")
cat(proper.cite)
writeLines(proper.cite, "citations.txt")
# Citation Script
# read in the text file
library_list <- readLines("R libraries.txt")
# initialize empty vector for citations
proper.cite <- c()
# loop through each library and add the citation to proper.cite, with error handling
for (library_name in library_list) {
if (require(library_name, character.only = TRUE, quietly = TRUE)) {
proper.cite <- c(proper.cite, capture.output(citation(library_name)))
} else {
message(paste(library_name, "is not an R library"))
}
}
proper.cite <- paste(proper.cite, collapse = "\n")
cat(proper.cite)
writeLines(proper.cite, "citations.txt")
# Create a bar plot of variable importance in descending order
ggplot(var_df, aes(x = variable, y = importance)) +
geom_bar(stat = "identity", color="black", fill = "forestgreen") +
labs(title = "Variable Importance Plot for RFE",
subtitle = subtitle_string,
xlab("Predictor"), ylab("Importance Score")) +
coord_flip() +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1))
# Load Data
## First thing run will be to set the working directory to my file location
## Next some libraries will be loaded along with the dataset
library(AppliedPredictiveModeling)
library(caret)
library(e1071)
library(corrplot)
library(lattice)
library(dplyr)
# Load dataset for your machine
# Set your working directory to the directory to where all project R Scripts
cwd <- getwd()
file.name <- "Kaggle-data-FINAL.csv"
paste(cwd, file.name ,sep="/")
df <- read.csv(paste(cwd, file.name ,sep="/"))
# Label the response variable column name
response_var <- "legitimate"
## Confirm there are no nulls
sum(is.na(df))
## Check for near zero variance using the nearZeroVar function
zeroVar <- nearZeroVar(df, saveMetrics=FALSE)
## Column index 10, 30, 31, 32, 33, and 47 all have zero  variance
colnames(df[c(10,30,31,32,33,47)])
##Dropping near zero variance columns
df_trans1 <- df[, -c(10,30,31,32,33,47)]
##Check to see what class each attribute is
sapply(df_trans1, class)
##Can see that md5 is a character class so we will drop this as it is not needed
df_trans2 <- df_trans1[,-2]
colnames(df_trans2)
## Find highly correlated variables; remove corr magnitude .8 or higher
corr_matrix <- cor(df_trans2)
high_corr <- findCorrelation(corr_matrix, cutoff = 0.8)
removed_variables <- names(df_trans2)[high_corr]
removed_variables
df_trans3 <- df_trans2[, -high_corr]
dim(df_trans3)
head(df_trans3)
## Next step will be to standardrize the variables
## https://www.r-bloggers.com/2022/07/how-to-standardize-data-in-r/
df_stdz <- df_trans3 %>%
mutate_at(-which(names(df_trans3) == response_var), ~(scale(.) %>%
as.vector))
# Matts normalization
df_stdz <- df_trans3 %>%
mutate_at(-which(names(df_trans3) == response_var), ~( (.-min(.))/(max(.)-min(.)) ))
# df_stdz <- mutate_all(df_stdz, function(x) as.numeric(as.character(x)))
## Now that all variables have been standardized, a test train split will be created
## I will be using a 70/30 split
set.seed(568)
# Create the partition index with a 70/30 split
index <- createDataPartition(y = df_stdz$legitimate, p = 0.7, list = FALSE)
# Create the train and test sets
train <- df_stdz[index, ]
test <- df_stdz[-index, ]
## Create the df with X and Y variables
# Remove "legitimate" column from training and test datasets
x_train <- train[, -which(names(train) == response_var)]
y_train <- train[, which(names(train) == response_var)]
y_train <- factor(y_train)
x_test <- test[, -which(names(test) == response_var)]
y_test <- test[, which(names(test) == response_var)]
## Set up the control option
# control <- rfeControl(functions = lrFuncs,
#                       method = "repeatedcv", ## Repeated CV
#                       repeats = 5, ## Number of repeats
#                       number = 10, ## Number of folds
#                       verbose = FALSE
## Set up the control option
control <- rfeControl(functions = lrFuncs,
method = "repeatedcv", ## Repeated CV
repeats = 2,
number = 3, ## Number of folds
verbose = FALSE
)
result_rfe1 <- rfe(x = x_train,
y = y_train,
sizes = c(1:8), # sizes = c(1:ncol(x_train)),
rfeControl = control)
result_rfe1
summary(result_rfe1)
# END:   Model Creation
#===============================================================================
# BEGIN: Plot Predictor Strength
library(ggplot2)
# Create Substring for Model Data
subtitle_string <- paste(
"Method", control$method,
"with", control$repeats,"Repeat(s)",
"using", control$number, "Fold(s)"
, sep = " "
)
# Extract variable importance from result_rfe1
var_importance <- varImp(result_rfe1)
# Create a data frame with variable names and importance scores
var_df <- data.frame(variable = row.names(var_importance),
importance = var_importance$Overall)
# Convert the variable column to a factor with ordered levels in reverse order
var_df$variable <- factor(var_df$variable, levels = rev(var_df$variable))
# Sort the data frame by importance scores in descending order
var_df <- var_df[order(var_df$importance, decreasing = TRUE),]
# Create a bar plot of variable importance in descending order
ggplot(var_df, aes(x = variable, y = importance)) +
geom_bar(stat = "identity", color="black", fill = "forestgreen") +
labs(title = "Variable Importance Plot for RFE",
subtitle = subtitle_string,
xlab("Predictor"), ylab("Importance Score")) +
coord_flip() +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1))
